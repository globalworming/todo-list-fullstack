{
	"info": {
		"_postman_id": "3a0d88e0-fe40-4b0c-8152-b2099ed48134",
		"name": "todo-fullstack",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('bff is serving', function () {",
							"    const json = pm.response.json()",
							"    pm.expect(json.services.find(it => it.name==='bff').serving).to.equal(true)",
							"});",
							"",
							"pm.test('todo is serving', function () {",
							"    const json = pm.response.json()",
							"    pm.expect(json.services.find(it => it.name==='todo').serving).to.equal(true)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:8080/health",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "8080",
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "save empty list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test('error type', function () {",
							"    const json = pm.response.json()",
							"    pm.expect(json.type).to.equal(\"ValidationException\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"some list\",\n    \"toDos\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:8080/toDoLists",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "8080",
					"path": [
						"toDoLists"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost"
		}
	]
}